import asyncio
import json
import os
import traceback
from datetime import datetime, timedelta
from httplib2 import Credentials
from sqlalchemy.orm import Session
from sqlalchemy import select
from models.knowledge_base import KnowledgeBase
from models.chat import ChatSession, Message
from config.redis_cache import cache_set
from config.database import AsyncSessionLocal
import gspread
from sqlalchemy.ext.asyncio import AsyncSession








async def save_message_to_db_background(data: dict, sender_name: str, image_url: list):
    """Background task: T·∫°o DB session ri√™ng ƒë·ªÉ l∆∞u tin nh·∫Øn"""
    async with AsyncSessionLocal() as new_db:
        try:
            message = Message(
                chat_session_id=data.get("chat_session_id"),
                sender_type=data.get("sender_type"),
                content=data.get("content"),
                sender_name=sender_name,
                image=json.dumps(image_url) if image_url else None
            )
            new_db.add(message)
            await new_db.commit()
            print(f"‚úÖ [Background] ƒê√£ l∆∞u tin nh·∫Øn ID: {message.id}")
            
        except Exception as e:
            print(f"‚ùå [Background] L·ªói l∆∞u tin nh·∫Øn: {e}")
            traceback.print_exc()
            await new_db.rollback()




async def update_session_admin_background(chat_session_id: int, sender_name: str):
    """Background task: T·∫°o DB session ri√™ng ƒë·ªÉ c·∫≠p nh·∫≠t session"""
    async with AsyncSessionLocal() as new_db:
        try:
            result = await new_db.execute(select(ChatSession).filter(ChatSession.id == chat_session_id))
            db_session = result.scalar_one_or_none()
            if db_session:
                db_session.status = "false"
                db_session.time = datetime.now() + timedelta(hours=1)
                db_session.previous_receiver = db_session.current_receiver
                db_session.current_receiver = sender_name
                await new_db.commit()
                
                # C·∫≠p nh·∫≠t cache
                session_cache_key = f"session:{chat_session_id}"
                session_data = {
                    'id': db_session.id,
                    'name': db_session.name,
                    'status': db_session.status,
                    'channel': db_session.channel,
                    'page_id': db_session.page_id,
                    'current_receiver': db_session.current_receiver,
                    'previous_receiver': db_session.previous_receiver,
                    'time': db_session.time.isoformat() if db_session.time else None
                }
                cache_set(session_cache_key, session_data, ttl=300)
                print(f"‚úÖ [Background] ƒê√£ c·∫≠p nh·∫≠t session {chat_session_id}")
                
        except Exception as e:
            print(f"‚ùå [Background] L·ªói c·∫≠p nh·∫≠t session: {e}")
            traceback.print_exc()
            await new_db.rollback()


async def send_to_platform_background(channel: str, page_id: str, recipient_id: str, message_data: dict, images=None):
    """Background task: G·ª≠i tin nh·∫Øn ƒë·∫øn platform t∆∞∆°ng ·ª©ng"""
    try:
        # Import c√°c h√†m send platform t·ª´ helper
        from helper.help_send_social import send_fb, send_telegram, send_zalo
        
        if channel == "facebook":
            await send_fb(page_id, recipient_id, message_data, images)
        elif channel == "telegram":
            await send_telegram(recipient_id, message_data)
        elif channel == "zalo":
            await send_zalo(recipient_id, message_data, images)
            
            
    except Exception as e:
        print(f"‚ùå [Background] L·ªói g·ª≠i tin nh·∫Øn {channel}: {e}")
        traceback.print_exc()


from sqlalchemy.ext.asyncio import AsyncSession


async def notify_missing_information(chat_session_id: int, user_question: str, bot_response: str):
    """
    H√†m th√¥ng b√°o khi bot kh√¥ng c√≥ th√¥ng tin trong c∆° s·ªü d·ªØ li·ªáu
    G·ª≠i th√¥ng b√°o ƒë·∫øn Telegram admin
    
    Args:
        chat_session_id: ID c·ªßa chat session
        user_question: C√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng
        bot_response: C√¢u tr·∫£ l·ªùi c·ªßa bot
    """
    try:

        # Import h√†m send_telegram t·ª´ helper
        from helper.help_send_social import send_telegram
        
        # B·∫°n c√≥ th·ªÉ l∆∞u chat ID admin trong database ho·∫∑c bi·∫øn m√¥i tr∆∞·ªùng
        ADMIN_CHAT_ID = "7913265581"
        
        # T·∫°o n·ªôi dung th√¥ng b√°o
        notification_message = f"""üö® TH√îNG B√ÅO: C√ÇU H·ªéI KH√îNG C√ì D·ªÆ LI·ªÜU TR·∫¢ L·ªúI

            üìå Session ID: {chat_session_id}

            ‚ùì C√¢u h·ªèi c·ªßa kh√°ch h√†ng:
            {user_question}

            ‚ö†Ô∏è Kh√¥ng c√≥ th√¥ng tin d·ªØ li·ªáu ƒë·ªÉ tr·∫£ l·ªùi
            """
        
        # T·∫°o message dict ƒë·ªÉ g·ª≠i qua h√†m send_telegram
        message_data = {
            "content": notification_message
        }
        
        # G·ª≠i th√¥ng b√°o ƒë·∫øn Telegram admin s·ª≠ d·ª•ng h√†m c√≥ s·∫µn
        await send_telegram(ADMIN_CHAT_ID, message_data)
        print("‚úÖ ƒê√£ g·ª≠i th√¥ng b√°o ƒë·∫øn Telegram admin th√†nh c√¥ng")
            
    except Exception as e:
        print(f"‚ùå Exception trong notify_missing_information: {e}")
        traceback.print_exc()


async def _generate_bot_response_common(
    user_content: str,
    chat_session_id: int,
    session_data: dict,
    new_db: AsyncSession
) -> dict:
    """
    H√†m chung ƒë·ªÉ generate bot response
    S·ª≠ d·ª•ng bot key cho vi·ªác generate response
    T∆∞∆°ng th√≠ch v·ªõi c·∫•u tr√∫c b·∫£ng m·ªõi: llm, llm_detail, llm_key
    """
    from llm.help_llm import get_current_model
    from llm.gpt import generate_gpt_response
    from llm.gemini import generate_gemini_response
    
    # L·∫•y th√¥ng tin model hi·ªán t·∫°i v·ªõi Round-Robin BOT API key
    # get_current_model s·∫Ω tr·∫£ v·ªÅ:
    # - name: "gemini" ho·∫∑c "gpt" 
    # - key: API key ƒë∆∞·ª£c ch·ªçn theo Round-Robin
    # - key_name: T√™n c·ªßa key (t·ª´ LLMKey.name)
    # - key_type: "bot" ho·∫∑c "embedding"
    # - llm_detail_id: ID c·ªßa LLMDetail (1=gemini, 2=gpt)
    model_info = await get_current_model(
        new_db, 
        chat_session_id=chat_session_id,
        key_type="bot"  # Ch·ªâ ƒë·ªãnh r√µ d√πng bot key
    )
    
    model_type = model_info["name"].lower()  # "gemini" ho·∫∑c "gpt"
    api_key = model_info["key"]  # API key ƒë√£ ƒë∆∞·ª£c ch·ªçn theo Round-Robin
    key_name = model_info.get("key_name", "free")  # T√™n key ho·∫∑c "free"
    key_type = model_info.get("key_type", "bot")  # "bot"
    llm_detail_id = model_info.get("llm_detail_id")  # ID c·ªßa LLMDetail
    
    print(f"ü§ñ Session {chat_session_id} - Model: {model_type} (LLMDetail ID: {llm_detail_id}), Bot Key: {key_name} (type: {key_type})")
    
    # G·ªçi h√†m generate t∆∞∆°ng ·ª©ng (function-based)
    # Response l√† JSON string: {"message": "...", "links": [...]}
    if "gpt" in model_type:
        response_json = await generate_gpt_response(
            api_key=api_key,
            db_session=new_db,
            query=user_content,
            chat_session_id=session_data["id"],
            model_type=model_type
        )
    elif "gemini" in model_type:
        response_json = await generate_gemini_response(
            api_key=api_key,
            db_session=new_db,
            query=user_content,
            chat_session_id=session_data["id"],
            model_type=model_type
        )
    else:
        raise ValueError(f"Unknown model type: {model_type}")
    
    # L∆∞u bot message v√†o database (l∆∞u JSON string ƒë·∫ßy ƒë·ªß)
    message_bot = Message(
        chat_session_id=chat_session_id,
        sender_type="bot",
        content=response_json  # L∆∞u JSON string: {"message": "...", "links": [...]}
    )
    new_db.add(message_bot)
    await new_db.commit()
    await new_db.refresh(message_bot)
    
    # ‚úÖ Ki·ªÉm tra xem bot c√≥ tr·∫£ l·ªùi "ch∆∞a c√≥ th√¥ng tin" kh√¥ng
    try:
        response_data = json.loads(response_json)
        message_content = response_data.get("message", "")
        
        if "ch∆∞a c√≥ th√¥ng tin ch√≠nh th·ª©c" in message_content.lower():
            print("‚ö†Ô∏è Ph√°t hi·ªán bot kh√¥ng c√≥ th√¥ng tin - G·ªçi h√†m th√¥ng b√°o...")
            # G·ªçi h√†m th√¥ng b√°o trong background ƒë·ªÉ kh√¥ng block response
            asyncio.create_task(
                notify_missing_information(chat_session_id, user_content, message_content)
            )
    except json.JSONDecodeError:
        # N·∫øu kh√¥ng parse ƒë∆∞·ª£c JSON, fallback v·ªÅ check to√†n b·ªô string
        if "ch∆∞a c√≥ th√¥ng tin ch√≠nh th·ª©c" in response_json.lower():
            print("‚ö†Ô∏è Ph√°t hi·ªán bot kh√¥ng c√≥ th√¥ng tin - G·ªçi h√†m th√¥ng b√°o...")
            asyncio.create_task(
                notify_missing_information(chat_session_id, user_content, response_json)
            )
    
    return {
        "id": message_bot.id,
        "chat_session_id": message_bot.chat_session_id,
        "sender_type": message_bot.sender_type,
        "sender_name": message_bot.sender_name,
        "content": response_json  # Tr·∫£ v·ªÅ JSON string, FE s·∫Ω t·ª± parse
    }


async def generate_and_send_bot_response_background(
    user_content: str, 
    chat_session_id: int, 
    session_data: dict,
    manager
):
    """üöÄ Background task: Generate bot response v√† g·ª≠i qua WebSocket"""
    async with AsyncSessionLocal() as new_db:
        try:
            # Generate response s·ª≠ d·ª•ng h√†m chung
            bot_message_data = await _generate_bot_response_common(
                user_content, chat_session_id, session_data, new_db
            )
            
            # T·∫°o bot message ƒë·ªÉ g·ª≠i qua websocket
            bot_message = {
                **bot_message_data,
                "session_name": session_data["name"],
                "session_status": session_data["status"],
                "current_receiver": session_data.get("current_receiver"),
                "previous_receiver": session_data.get("previous_receiver")
            }
            
            # G·ª≠i bot response qua websocket
            await manager.broadcast_to_admins(bot_message)
            
            await manager.send_to_customer(chat_session_id, bot_message)
            
            
        except Exception as e:
            print(f"‚ùå [Background] L·ªói t·∫°o bot response: {e}")
            traceback.print_exc()
            await new_db.rollback()


async def generate_and_send_platform_bot_response_background(
    user_content: str, 
    chat_session_id: int, 
    session_data: dict,
    platform: str,
    page_id: str,
    sender_id: str,
    manager
):
    async with AsyncSessionLocal() as new_db:
        try:
            from helper.help_send_social import send_fb, send_telegram, send_zalo
            
            # Generate response s·ª≠ d·ª•ng h√†m chung
            bot_message_data = await _generate_bot_response_common(
                user_content, chat_session_id, session_data, new_db
            )
            
            # T·∫°o bot message ƒë·ªÉ g·ª≠i
            bot_message = {
                **bot_message_data,
                "session_name": session_data["name"],
                "platform": platform,
                "session_status": session_data["status"]
            }
            
            # G·ª≠i bot response qua websocket cho admin
            await manager.broadcast_to_admins(bot_message)

            
            # ‚úÖ G·ª≠i v·ªÅ platform t∆∞∆°ng ·ª©ng (async, kh√¥ng block)
            if platform == "facebook":
                await send_fb(page_id, sender_id, bot_message, None)
            elif platform == "telegram":
                await send_telegram(sender_id, bot_message)
            elif platform == "zalo":
                await send_zalo(sender_id, bot_message, None)            
        except Exception as e:
            traceback.print_exc()
            await new_db.rollback()