import { useState, useEffect } from "react";

const UserForm = ({ initialData, onSubmit, onCancel, availableRoles = [], isProfileMode = false }) => {

    // 1. √Ånh x·∫° T√äN VAI TR√í (key) sang T√äN HI·ªÇN TH·ªä (label)
    // ƒê√¢y l√† map ƒë·ªÉ hi·ªÉn th·ªã t√™n cho ƒë·∫πp, kh√¥ng ph·∫£i logic ph√¢n quy·ªÅn.
    const allRoleInfo = {
        root: "Si√™u qu·∫£n tr·ªã (Root)",
        superadmin: "Qu·∫£n tr·ªã c·∫•p cao",
        admin: "Qu·∫£n tr·ªã vi√™n",
        user: "Nh√¢n vi√™n", // 'user' l√† key t·ª´ API abilities c·ªßa b·∫°n
        viewer: "Nh√¢n vi√™n (Xem)", // Gi·ªØ l·∫°i 'viewer' ph√≤ng tr∆∞·ªùng h·ª£p c≈©
    };

    // 2. T·∫°o c√°c l·ª±a ch·ªçn dropdown (options) CH·ªà T·ª™ PROP availableRoles
    // N·∫øu availableRoles = ["user"], th√¨ roleOptions = [{ value: "user", label: "Nh√¢n vi√™n" }]
    const roleOptions = availableRoles.map(roleKey => ({
        value: roleKey,
        label: allRoleInfo[roleKey] || roleKey // L·∫•y label t·ª´ map, ho·∫∑c d√πng ch√≠nh key n·∫øu kh√¥ng c√≥
    }));

    const isEditing = Boolean(initialData);

    // 3. Kh·ªüi t·∫°o state
    const [formData, setFormData] = useState({
        full_name: initialData?.full_name || "",
        username: initialData?.username || "",
        email: initialData?.email || "",
        // N·∫øu s·ª≠a: d√πng role hi·ªán t·∫°i.
        // N·∫øu t·∫°o m·ªõi: d√πng role ƒê·∫¶U TI√äN trong danh s√°ch ƒë∆∞·ª£c ph√©p.
        role: initialData?.role || (roleOptions.length > 0 ? roleOptions[0].value : ""),
        password: "",
        is_active: initialData?.is_active ?? true,
    });

    const [error, setError] = useState("");
    const [isLoading, setIsLoading] = useState(false);

    // 4. X√ìA B·ªé: roleHierarchy, getRoleLevel, getAvailableRoleOptions
    // (To√†n b·ªô logic n√†y ƒë√£ b·ªã x√≥a)

    // 5. C·∫≠p nh·∫≠t state khi 'initialData' thay ƒë·ªïi (khi b·∫•m 'Edit')
    useEffect(() => {
        if (initialData) {
            setFormData({
                full_name: initialData.full_name,
                username: initialData.username,
                email: initialData.email,
                role: initialData.role,
                password: "",
                is_active: initialData.is_active ?? true, // D√πng ?? true ƒë·ªÉ ƒë·∫£m b·∫£o
            });
        }
    }, [initialData]);

    const handleChange = (e) => {
        const { name, value, type, checked } = e.target;
        setFormData({
            ...formData,
            [name]: type === "checkbox" ? checked : value,
        });
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        setError(""); // Reset l·ªói

        // Validation - role kh√¥ng b·∫Øt bu·ªôc trong profile mode
        const requiredFields = ['full_name', 'username', 'email'];
        if (!isProfileMode) {
            requiredFields.push('role');
        }

        const missingFields = requiredFields.filter(field => !formData[field]);
        if (missingFields.length > 0) {
            setError(`Vui l√≤ng ƒëi·ªÅn c√°c tr∆∞·ªùng b·∫Øt bu·ªôc: ${missingFields.join(', ')}`);
            return;
        }

        // 6. X√ìA B·ªé: Logic validation getRoleLevel
        // (Kh√¥ng c√≤n c·∫ßn thi·∫øt v√¨ dropdown ƒë√£ l·ªçc s·∫µn c√°c role h·ª£p l·ªá)

        // N·∫øu th√™m m·ªõi, password b·∫Øt bu·ªôc
        if (!initialData && !formData.password) {
            setError("M·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc cho ng∆∞·ªùi d√πng m·ªõi");
            return;
        }

        setIsLoading(true);
        try {
            const dataToSubmit = { ...formData };
            if (isProfileMode) {
                delete dataToSubmit.role; // Kh√¥ng g·ª≠i role trong profile mode
            }

            await onSubmit(dataToSubmit);
        } catch (err) {
            setError(err.message || "C√≥ l·ªói x·∫£y ra");
        } finally {
            setIsLoading(false);
        }
    };

    // 7. Render component (gi·ªØ nguy√™n HTML, ch·ªâ thay ƒë·ªïi logic)
    return (
        <div className="fixed inset-0 bg-black/50 backdrop-blur-sm overflow-y-auto h-full w-full flex justify-center items-start sm:items-center z-50 p-2 sm:p-4">
            <div className="bg-white rounded-lg sm:rounded-xl border border-gray-200 w-full max-w-xs sm:max-w-lg lg:max-w-2xl mt-4 sm:mt-0 max-h-[95vh] sm:max-h-[90vh] overflow-hidden shadow-xl">

                {/* Header */}
                <div className="bg-gray-600 p-4 sm:p-6 text-white">
                    <div className="flex items-start sm:items-center gap-3">
                        <div className="w-10 h-10 sm:w-12 sm:h-12 bg-white bg-opacity-20 rounded-lg flex items-center justify-center flex-shrink-0">
                            <span className="text-lg sm:text-xl">üë§</span>
                        </div>
                        <div className="min-w-0 flex-1">
                            <h2 className="text-lg sm:text-xl font-semibold mb-1">
                                {isProfileMode ? "C·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n" :
                                    initialData ? "Ch·ªânh s·ª≠a ng∆∞·ªùi d√πng" : "T·∫°o ng∆∞·ªùi d√πng m·ªõi"}
                            </h2>
                            <p className="text-gray-100 text-xs sm:text-sm">
                                {isProfileMode ? "Ch·ªânh s·ª≠a th√¥ng tin c√° nh√¢n c·ªßa b·∫°n" :
                                    initialData ? "C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng" : "Th√™m th√†nh vi√™n m·ªõi v√†o h·ªá th·ªëng"}
                            </p>
                        </div>
                    </div>
                </div>

                {/* Form Content */}
                <div className="p-3 sm:p-6 overflow-y-auto" style={{ maxHeight: 'calc(95vh - 180px)' }}>
                    {error && (
                        <div className="mb-4 p-3 bg-red-50 border border-red-200 text-red-800 rounded-lg">
                            <div className="flex items-start gap-2">
                                <span className="text-red-500 flex-shrink-0">‚ö†Ô∏è</span>
                                <span className="text-sm">{error}</span>
                            </div>
                        </div>
                    )}

                    <form onSubmit={handleSubmit} className="space-y-4 sm:space-y-5">
                        <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                            {/* Full Name */}
                            <div className="space-y-1 sm:space-y-2">
                                <label className="block text-gray-700 font-medium text-sm">H·ªç v√† t√™n *</label>
                                <input
                                    type="text"
                                    name="full_name"
                                    value={formData.full_name}
                                    onChange={handleChange}
                                    className="w-full px-3 py-2 text-sm sm:text-base border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-gray-500 focus:border-transparent"
                                    placeholder="Nh·∫≠p h·ªç v√† t√™n..."
                                    required
                                />
                            </div>

                            {/* Username */}
                            <div className="space-y-1 sm:space-y-2">
                                <label className="block text-gray-700 font-medium text-sm">T√™n ƒëƒÉng nh·∫≠p *</label>
                                <input
                                    type="text"
                                    name="username"
                                    value={formData.username}
                                    onChange={handleChange}
                                    className="w-full px-3 py-2 text-sm sm:text-base border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-gray-500 focus:border-transparent font-mono"
                                    placeholder="Nh·∫≠p t√™n ƒëƒÉng nh·∫≠p..."
                                    required
                                    disabled={isEditing} // Kh√¥ng cho ƒë·ªïi username khi edit
                                />
                            </div>

                            {/* Email */}
                            <div className="space-y-1 sm:space-y-2">
                                <label className="block text-gray-700 font-medium text-sm">Email *</label>
                                <input
                                    type="email"
                                    name="email"
                                    value={formData.email}
                                    onChange={handleChange}
                                    className="w-full px-3 py-2 text-sm sm:text-base border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-gray-500 focus:border-transparent"
                                    placeholder="example@domain.com"
                                    required
                                />
                            </div>

                            {/* Role - Hidden in profile mode */}
                            {!isProfileMode && (
                                <div className="space-y-1 sm:space-y-2">
                                    <label className="block text-gray-700 font-medium text-sm">Vai tr√≤ *</label>
                                    <select
                                        name="role"
                                        value={formData.role}
                                        onChange={handleChange}
                                        className="w-full px-3 py-2 text-sm sm:text-base border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-gray-500 focus:border-transparent"
                                        required
                                        // V√¥ hi·ªáu h√≥a n·∫øu kh√¥ng c√≥ role n√†o ƒë·ªÉ ch·ªçn (c·∫£ khi edit l·∫´n create)
                                        disabled={roleOptions.length === 0 && !initialData?.role}
                                    >
                                        <option value="">Ch·ªçn vai tr√≤...</option>

                                        {/* 8. LOGIC RENDER DROPDOWN M·ªöI */}
                                        {/* Render c√°c role ƒë∆∞·ª£c ph√©p t·ª´ API */}
                                        {roleOptions.map(option => (
                                            <option key={option.value} value={option.value}>
                                                {option.label}
                                            </option>
                                        ))}

                                        {/* Tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát: ƒêang Edit 
                                          V√† role hi·ªán t·∫°i c·ªßa user (initialData.role)
                                          KH√îNG c√≥ trong danh s√°ch role ƒë∆∞·ª£c ph√©p (roleOptions)
                                          (VD: admin s·ª≠a 1 admin kh√°c, nh∆∞ng ch·ªâ ƒë∆∞·ª£c ph√©p g√°n 'user')
                                          -> Ta ph·∫£i th√™m role 'admin' v√†o list ƒë·ªÉ n√≥ hi·ªÉn th·ªã ƒë√∫ng.
                                        */}
                                        {isEditing && !roleOptions.some(opt => opt.value === initialData.role) && (
                                            <option key={initialData.role} value={initialData.role}>
                                                {allRoleInfo[initialData.role] || initialData.role} (Vai tr√≤ hi·ªán t·∫°i)
                                            </option>
                                        )}

                                    </select>

                                    {/* Th√¥ng b√°o khi kh√¥ng c√≥ quy·ªÅn */}
                                    {roleOptions.length === 0 && !isEditing && (
                                        <p className="text-xs text-amber-600 mt-1">
                                            ‚ö†Ô∏è B·∫°n kh√¥ng c√≥ quy·ªÅn g√°n b·∫•t k·ª≥ vai tr√≤ n√†o.
                                        </p>
                                    )}
                                </div>
                            )}

                            {/* Role display only in profile mode */}
                            {isProfileMode && (
                                <div className="space-y-1 sm:space-y-2">
                                    <label className="block text-gray-700 font-medium text-sm">
                                        Vai tr√≤ hi·ªán t·∫°i
                                    </label>
                                    <div className="w-full px-3 py-2 text-sm sm:text-base border border-gray-200 rounded-lg bg-gray-50">
                                        <span className={`font-medium ${allRoleInfo[formData.role] ? (formData.role === 'root' ? 'text-purple-600' :
                                            formData.role === 'superadmin' ? 'text-red-600' :
                                                formData.role === 'admin' ? 'text-blue-600' :
                                                    'text-gray-600') : 'text-gray-600'
                                            }`}>
                                            {allRoleInfo[formData.role] || formData.role}
                                        </span>
                                    </div>
                                    <p className="text-xs text-gray-500 mt-1">
                                        B·∫°n kh√¥ng th·ªÉ thay ƒë·ªïi vai tr√≤ c·ªßa ch√≠nh m√¨nh.
                                    </p>
                                </div>
                            )}
                        </div>

                        {/* Password */}
                        <div className="space-y-1 sm:space-y-2">
                            <label className="block text-gray-700 font-medium text-sm">
                                M·∫≠t kh·∫©u {initialData ? "" : "*"}
                            </label>
                            <input
                                type="password"
                                name="password"
                                value={formData.password}
                                onChange={handleChange}
                                className="w-full px-3 py-2 text-sm sm:text-base border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-gray-500 focus:border-transparent"
                                placeholder={initialData ? "ƒê·ªÉ tr·ªëng ƒë·ªÉ gi·ªØ m·∫≠t kh·∫©u hi·ªán t·∫°i" : "Nh·∫≠p m·∫≠t kh·∫©u..."}
                            />
                            {initialData && (
                                <p className="text-xs sm:text-sm text-gray-500">
                                    ƒê·ªÉ tr·ªëng n·∫øu kh√¥ng mu·ªën thay ƒë·ªïi m·∫≠t kh·∫©u
                                </p>
                            )}
                        </div>

                        {/* Active Status */}
                        <div className="bg-gray-50 rounded-lg p-3 sm:p-4 border border-gray-200">
                            <div className="flex items-start sm:items-center justify-between gap-3">
                                <div className="flex-1 min-w-0">
                                    <h3 className="font-medium text-gray-800 text-sm sm:text-base">Tr·∫°ng th√°i ho·∫°t ƒë·ªông</h3>
                                    <p className="text-gray-600 text-xs sm:text-sm mt-1">Cho ph√©p ng∆∞·ªùi d√πng ƒëƒÉng nh·∫≠p v√† s·ª≠ d·ª•ng h·ªá th·ªëng</p>
                                </div>
                                <label className="relative inline-flex items-center cursor-pointer flex-shrink-0">
                                    <input
                                        type="checkbox"
                                        name="is_active"
                                        checked={formData.is_active}
                                        onChange={handleChange}
                                        className="sr-only peer"
                                    />
                                    <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-2 peer-focus:ring-gray-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-gray-600"></div>
                                </label>
                            </div>
                        </div>
                    </form>
                </div>

                {/* Footer Actions */}
                <div className="p-3 sm:p-6 border-t border-gray-200 bg-gray-50">
                    <div className="flex flex-col sm:flex-row gap-2 sm:gap-3 justify-end">
                        <button
                            type="button"
                            onClick={onCancel}
                            className="w-full sm:w-auto order-2 sm:order-1 px-4 py-2 text-sm sm:text-base text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
                        >
                            H·ªßy
                        </button>
                        <button
                            type="submit"
                            onClick={handleSubmit}
                            disabled={isLoading}
                            className="w-full sm:w-auto order-1 sm:order-2 px-4 sm:px-6 py-2 text-sm sm:text-base bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                        >
                            {isLoading ? (
                                <div className="flex items-center justify-center gap-2">
                                    <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                                    <span>ƒêang x·ª≠ l√Ω...</span>
                                </div>
                            ) : (
                                <>
                                    {initialData ? "C·∫≠p nh·∫≠t" : "T·∫°o m·ªõi"}
                                </>
                            )}
                        </button>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default UserForm;